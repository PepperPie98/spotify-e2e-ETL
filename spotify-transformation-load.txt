import json
from datetime import datetime
from io import StringIO
import boto3
import pandas as pd

def album(data):
    album_list = []
    for row in data['items']:
        album_id = row['track']['album']['id']
        album_name = row['track']['album']['name']
        album_release_date =row['track']['album']['release_date']
        album_url=row['track']['album']['external_urls']
        album_elements = {'album_id': album_id,'album_name' :album_name,'album_release_date':album_release_date,'album_url':album_url}
        album_list.append(album_elements)
    return album_list
    
    
def artist(data):
    artist_list = []
    for row in data['items']:
        for key,value in row.items():
            if key == 'track':
                for artist in value['artists']:
                    artist_dict =  {'artist_id' : artist['id'], 'artist_name': artist['name']}
                    artist_list.append(artist_dict)
    return artist_list




def lambda_handler(event, context):
    #create object S3
    s3 = boto3.client('s3')
    # set bucket name
    Bucket = "spotifyetladityavm"
    Key = "rawdata/tobeProcessed/"
   
    spotify_data = []
    spotify_keys=[]
    #function to read the file
    for file in s3.list_objects(Bucket=Bucket, Prefix = Key)['Contents']:
        file_key = file['Key']
        if file_key.split('.')[-1]=="json":
            response = s3.get_object(Bucket=Bucket,  Key = file_key )
            content = response['Body']
            jsonObject = json.loads(content.read())
            spotify_data.append(jsonObject)
            spotify_keys.append(file_key)
     
            
    for data in spotify_data:
        album_list = album(data)
        artist_list= artist(data)
        album_df = pd.DataFrame.from_dict(album_list)
        artist_df=pd.DataFrame.from_dict(artist_list)
        
        album_key = "transformedData/albumData/albumData_" + str(datetime.now())+ ".csv"
        album_buffer =StringIO()
        album_df.to_csv(album_buffer, index = False)# index is used to ignore row number in csv 
        album_content=album_buffer.getvalue()
        s3.put_object(Bucket=Bucket, Key = album_key, Body= album_content)
        
        
        artist_key = "transformedData/artistData/artistData_" + str(datetime.now())+ ".csv"
        artist_buffer =StringIO()
        artist_df.to_csv(artist_buffer, index = False)# index is used to ignore row number in csv 
        artist_content=artist_buffer.getvalue()
        s3.put_object(Bucket=Bucket, Key = artist_key, Body= artist_content)
        
        
        
        
    #copying src files from tobe processed folder to already processed folder
    s3_resource = boto3.resource('s3')
    for key in spotify_keys:
        copy_source = {
            'Bucket' : Bucket,
            'Key' : key
        }
        s3_resource.meta.client.copy(copy_source, Bucket, 'rawdata/alreadyProcessed/' + key.split("/")[-1])
        s3_resource.Object(Bucket, key).delete()
